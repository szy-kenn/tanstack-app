/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthRouteImport } from './routes/_auth/route'
import { Route as StoreIdRouteImport } from './routes/$storeId/route'
import { Route as IndexImport } from './routes/index'
import { Route as StoreIdIndexImport } from './routes/$storeId/index'
import { Route as AuthSignupImport } from './routes/_auth/signup'
import { Route as AuthLoginImport } from './routes/_auth/login'
import { Route as AuthForgotPasswordImport } from './routes/_auth/forgot-password'
import { Route as appProfileImport } from './routes/(app)/profile'
import { Route as appCheckoutImport } from './routes/(app)/checkout'
import { Route as appCartImport } from './routes/(app)/cart'
import { Route as StoreIdProductsIndexImport } from './routes/$storeId/products_/index'
import { Route as StoreIdProductsProductIdIndexImport } from './routes/$storeId/products_/$productId/index'

// Create/Update Routes

const AuthRouteRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const StoreIdRouteRoute = StoreIdRouteImport.update({
  id: '/$storeId',
  path: '/$storeId',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const StoreIdIndexRoute = StoreIdIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => StoreIdRouteRoute,
} as any)

const AuthSignupRoute = AuthSignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => AuthRouteRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRouteRoute,
} as any)

const AuthForgotPasswordRoute = AuthForgotPasswordImport.update({
  id: '/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => AuthRouteRoute,
} as any)

const appProfileRoute = appProfileImport.update({
  id: '/(app)/profile',
  path: '/profile',
  getParentRoute: () => rootRoute,
} as any)

const appCheckoutRoute = appCheckoutImport.update({
  id: '/(app)/checkout',
  path: '/checkout',
  getParentRoute: () => rootRoute,
} as any)

const appCartRoute = appCartImport.update({
  id: '/(app)/cart',
  path: '/cart',
  getParentRoute: () => rootRoute,
} as any)

const StoreIdProductsIndexRoute = StoreIdProductsIndexImport.update({
  id: '/products_/',
  path: '/products/',
  getParentRoute: () => StoreIdRouteRoute,
} as any)

const StoreIdProductsProductIdIndexRoute =
  StoreIdProductsProductIdIndexImport.update({
    id: '/products_/$productId/',
    path: '/products/$productId/',
    getParentRoute: () => StoreIdRouteRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/$storeId': {
      id: '/$storeId'
      path: '/$storeId'
      fullPath: '/$storeId'
      preLoaderRoute: typeof StoreIdRouteImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRoute
    }
    '/(app)/cart': {
      id: '/(app)/cart'
      path: '/cart'
      fullPath: '/cart'
      preLoaderRoute: typeof appCartImport
      parentRoute: typeof rootRoute
    }
    '/(app)/checkout': {
      id: '/(app)/checkout'
      path: '/checkout'
      fullPath: '/checkout'
      preLoaderRoute: typeof appCheckoutImport
      parentRoute: typeof rootRoute
    }
    '/(app)/profile': {
      id: '/(app)/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof appProfileImport
      parentRoute: typeof rootRoute
    }
    '/_auth/forgot-password': {
      id: '/_auth/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof AuthForgotPasswordImport
      parentRoute: typeof AuthRouteImport
    }
    '/_auth/login': {
      id: '/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof AuthRouteImport
    }
    '/_auth/signup': {
      id: '/_auth/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof AuthSignupImport
      parentRoute: typeof AuthRouteImport
    }
    '/$storeId/': {
      id: '/$storeId/'
      path: '/'
      fullPath: '/$storeId/'
      preLoaderRoute: typeof StoreIdIndexImport
      parentRoute: typeof StoreIdRouteImport
    }
    '/$storeId/products_/': {
      id: '/$storeId/products_/'
      path: '/products'
      fullPath: '/$storeId/products'
      preLoaderRoute: typeof StoreIdProductsIndexImport
      parentRoute: typeof StoreIdRouteImport
    }
    '/$storeId/products_/$productId/': {
      id: '/$storeId/products_/$productId/'
      path: '/products/$productId'
      fullPath: '/$storeId/products/$productId'
      preLoaderRoute: typeof StoreIdProductsProductIdIndexImport
      parentRoute: typeof StoreIdRouteImport
    }
  }
}

// Create and export the route tree

interface StoreIdRouteRouteChildren {
  StoreIdIndexRoute: typeof StoreIdIndexRoute
  StoreIdProductsIndexRoute: typeof StoreIdProductsIndexRoute
  StoreIdProductsProductIdIndexRoute: typeof StoreIdProductsProductIdIndexRoute
}

const StoreIdRouteRouteChildren: StoreIdRouteRouteChildren = {
  StoreIdIndexRoute: StoreIdIndexRoute,
  StoreIdProductsIndexRoute: StoreIdProductsIndexRoute,
  StoreIdProductsProductIdIndexRoute: StoreIdProductsProductIdIndexRoute,
}

const StoreIdRouteRouteWithChildren = StoreIdRouteRoute._addFileChildren(
  StoreIdRouteRouteChildren,
)

interface AuthRouteRouteChildren {
  AuthForgotPasswordRoute: typeof AuthForgotPasswordRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthSignupRoute: typeof AuthSignupRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthForgotPasswordRoute: AuthForgotPasswordRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthSignupRoute: AuthSignupRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$storeId': typeof StoreIdRouteRouteWithChildren
  '': typeof AuthRouteRouteWithChildren
  '/cart': typeof appCartRoute
  '/checkout': typeof appCheckoutRoute
  '/profile': typeof appProfileRoute
  '/forgot-password': typeof AuthForgotPasswordRoute
  '/login': typeof AuthLoginRoute
  '/signup': typeof AuthSignupRoute
  '/$storeId/': typeof StoreIdIndexRoute
  '/$storeId/products': typeof StoreIdProductsIndexRoute
  '/$storeId/products/$productId': typeof StoreIdProductsProductIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthRouteRouteWithChildren
  '/cart': typeof appCartRoute
  '/checkout': typeof appCheckoutRoute
  '/profile': typeof appProfileRoute
  '/forgot-password': typeof AuthForgotPasswordRoute
  '/login': typeof AuthLoginRoute
  '/signup': typeof AuthSignupRoute
  '/$storeId': typeof StoreIdIndexRoute
  '/$storeId/products': typeof StoreIdProductsIndexRoute
  '/$storeId/products/$productId': typeof StoreIdProductsProductIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/$storeId': typeof StoreIdRouteRouteWithChildren
  '/_auth': typeof AuthRouteRouteWithChildren
  '/(app)/cart': typeof appCartRoute
  '/(app)/checkout': typeof appCheckoutRoute
  '/(app)/profile': typeof appProfileRoute
  '/_auth/forgot-password': typeof AuthForgotPasswordRoute
  '/_auth/login': typeof AuthLoginRoute
  '/_auth/signup': typeof AuthSignupRoute
  '/$storeId/': typeof StoreIdIndexRoute
  '/$storeId/products_/': typeof StoreIdProductsIndexRoute
  '/$storeId/products_/$productId/': typeof StoreIdProductsProductIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$storeId'
    | ''
    | '/cart'
    | '/checkout'
    | '/profile'
    | '/forgot-password'
    | '/login'
    | '/signup'
    | '/$storeId/'
    | '/$storeId/products'
    | '/$storeId/products/$productId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/cart'
    | '/checkout'
    | '/profile'
    | '/forgot-password'
    | '/login'
    | '/signup'
    | '/$storeId'
    | '/$storeId/products'
    | '/$storeId/products/$productId'
  id:
    | '__root__'
    | '/'
    | '/$storeId'
    | '/_auth'
    | '/(app)/cart'
    | '/(app)/checkout'
    | '/(app)/profile'
    | '/_auth/forgot-password'
    | '/_auth/login'
    | '/_auth/signup'
    | '/$storeId/'
    | '/$storeId/products_/'
    | '/$storeId/products_/$productId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  StoreIdRouteRoute: typeof StoreIdRouteRouteWithChildren
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  appCartRoute: typeof appCartRoute
  appCheckoutRoute: typeof appCheckoutRoute
  appProfileRoute: typeof appProfileRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  StoreIdRouteRoute: StoreIdRouteRouteWithChildren,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  appCartRoute: appCartRoute,
  appCheckoutRoute: appCheckoutRoute,
  appProfileRoute: appProfileRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/$storeId",
        "/_auth",
        "/(app)/cart",
        "/(app)/checkout",
        "/(app)/profile"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/$storeId": {
      "filePath": "$storeId/route.tsx",
      "children": [
        "/$storeId/",
        "/$storeId/products_/",
        "/$storeId/products_/$productId/"
      ]
    },
    "/_auth": {
      "filePath": "_auth/route.tsx",
      "children": [
        "/_auth/forgot-password",
        "/_auth/login",
        "/_auth/signup"
      ]
    },
    "/(app)/cart": {
      "filePath": "(app)/cart.tsx"
    },
    "/(app)/checkout": {
      "filePath": "(app)/checkout.tsx"
    },
    "/(app)/profile": {
      "filePath": "(app)/profile.tsx"
    },
    "/_auth/forgot-password": {
      "filePath": "_auth/forgot-password.tsx",
      "parent": "/_auth"
    },
    "/_auth/login": {
      "filePath": "_auth/login.tsx",
      "parent": "/_auth"
    },
    "/_auth/signup": {
      "filePath": "_auth/signup.tsx",
      "parent": "/_auth"
    },
    "/$storeId/": {
      "filePath": "$storeId/index.tsx",
      "parent": "/$storeId"
    },
    "/$storeId/products_/": {
      "filePath": "$storeId/products_/index.tsx",
      "parent": "/$storeId"
    },
    "/$storeId/products_/$productId/": {
      "filePath": "$storeId/products_/$productId/index.tsx",
      "parent": "/$storeId"
    }
  }
}
ROUTE_MANIFEST_END */
